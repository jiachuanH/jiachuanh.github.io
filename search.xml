<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Canal</title>
      <link href="/2023/01/19/Canal/"/>
      <url>/2023/01/19/Canal/</url>
      
        <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​      阿里巴巴 B2B 公司，因为业务的特性，卖家主要集中在国内，买家主要集中在国外，所 以衍生出了&#x3D;&#x3D;同步杭州和美国异地机房的需求，&#x3D;&#x3D;从 2010 年开始，阿里系公司开始逐步的尝试 基于数据库的日志解析，获取增量变更进行同步，由此衍生出了增量订阅&amp;消费的业务。 Canal 是用 Java 开发的基于数据库增量日志解析，提供增量数据订阅&amp;消费的中间件。 目前。&#x3D;&#x3D;Canal 主要支持了 MySQL 的 Binlog 解析，解析完成后才利用 Canal Client 来处理获得 的相关数据。&#x3D;&#x3D;（数据库同步需要阿里的 Otter 中间件，基于 Canal）。</p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><ul><li><strong>利用Mysql主从复制 [^见Maxwell]</strong></li></ul><p>把自己伪装成 Slave，假装从 Master 复制数据。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><blockquote><p>阿里 Otter 中间件的一部分</p></blockquote><p><img src="/../image/image-20220419175308400.png" alt="image-20220419175308400"></p><ul><li><p>场景1 ：更新缓存</p><p><img src="/../image/image-20220419175420214.png" alt="image-20220419175420214"></p></li><li><p>场景2   </p><p>抓取业务表的新增变化数据，用于制作实时统计（我们就是这种场景）</p></li></ul><h1 id="二、安装部署"><a href="#二、安装部署" class="headerlink" title="二、安装部署"></a>二、安装部署</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建数据库gamll-2021</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建数据表</span></span><br><span class="line">CREATE TABLE user_info(</span><br><span class="line">`<span class="built_in">id</span>` VARCHAR(255),</span><br><span class="line">`name` VARCHAR(255),</span><br><span class="line">`sex` VARCHAR(255)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>🚩Mysql的Binlog配置与测试 见Maxwell</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#赋权</span><br><span class="line">mysql<span class="operator">&gt;</span><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, REPLICATION SLAVE, REPLICATION CLIENT <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;canal&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;canal&#x27;</span> ;</span><br></pre></td></tr></table></figure><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p><a href="https://github.com/alibaba/canal/releases">下载链接</a>        &#x3D;&#x3D;canal.deployer-1.1.2.tar.gz&#x3D;&#x3D;</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载后上传到/opt/sortware  解压到 /opt/module/canal</span></span><br><span class="line">🚩提前创建/opt/module/canal</span><br><span class="line">$ tar -zxvf canal.deployer-1.1.2.tar.gz -C /opt/module/canal</span><br></pre></td></tr></table></figure><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><ul><li><p><strong>canal.properties</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在/opt/module/canal/conf</span></span><br><span class="line"></span><br><span class="line">👇修改如下内容</span><br><span class="line"><span class="comment">#################################################</span></span><br><span class="line"><span class="comment">######### common argument ############# </span></span><br><span class="line"><span class="comment">#################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tcp, kafka, RocketMQ</span></span><br><span class="line">canal.serverMode = tcp</span><br><span class="line"></span><br><span class="line"><span class="comment">#################################################</span></span><br><span class="line"><span class="comment">######### destinations ############# </span></span><br><span class="line"><span class="comment">#################################################</span></span><br><span class="line">canal.destinations = example</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p><code>canal.destinations = example</code></p><p>&#x3D;&#x3D;一个 canal 服务 中可以有多个 instance，conf&#x2F;下的每一个 example文件 即是一个实例默认一个&#x3D;&#x3D;</p><!--如果需要多个实例处理不同的 MySQL 数据的话，直 接拷贝出多个 example，并对其重新命名，命名和配置文件中指定的名称一致，然后修改 canal.properties 中的 canal.destinations=实例 1，实例 2，实例 3。--><ul><li><p><strong>instance.properties</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#地址/opt/module/canal/conf/example</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置Mysql服务器地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#################################################</span></span><br><span class="line"><span class="comment">## mysql serverId , v1.0.26+ will autoGen </span></span><br><span class="line">canal.instance.mysql.slaveId=20</span><br><span class="line"></span><br><span class="line">canal.instance.master.address=hadoop102:3306</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置连接 MySQL 的用户名和密码，默认就是我们前面授权的 canal</span></span><br><span class="line"><span class="comment"># username/password</span></span><br><span class="line">canal.instance.dbUsername=canal</span><br><span class="line">canal.instance.dbPassword=canal</span><br></pre></td></tr></table></figure></li></ul><h1 id="三、案例实操"><a href="#三、案例实操" class="headerlink" title="三、案例实操"></a>三、案例实操</h1><p><code>实时监控</code></p><h2 id="TCP-模式测试"><a href="#TCP-模式测试" class="headerlink" title="TCP 模式测试"></a>TCP 模式测试</h2><ul><li><p><strong>在idea创建 gmall-canal 项目</strong></p></li><li><p><strong>配置pom</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;dependencies&gt;</span></span><br><span class="line">    <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">        <span class="attr">&lt;groupId&gt;com.alibaba.otter&lt;/groupId&gt;</span></span><br><span class="line">        <span class="attr">&lt;artifactId&gt;canal.client&lt;/artifactId&gt;</span></span><br><span class="line">        <span class="attr">&lt;version&gt;1.1.2&lt;/version&gt;</span></span><br><span class="line">    <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line">    <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">        <span class="attr">&lt;groupId&gt;org.apache.kafka&lt;/groupId&gt;</span></span><br><span class="line">        <span class="attr">&lt;artifactId&gt;kafka-clients&lt;/artifactId&gt;</span></span><br><span class="line">        <span class="attr">&lt;version&gt;2.4.1&lt;/version&gt;</span></span><br><span class="line">    <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"><span class="attr">&lt;/dependencies&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>创建 com.atguigu.app 包创建 CanalClient</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CanalClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, InvalidProtocolBufferException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1 获取canal连接对象</span></span><br><span class="line">        <span class="type">CanalConnector</span> <span class="variable">connector</span> <span class="operator">=</span> CanalConnectors.newSingleConnector(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;hadoop102&quot;</span>, <span class="number">11111</span>), <span class="string">&quot;example&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//2 获取连接</span></span><br><span class="line">            connector.connect();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3 订阅数据库</span></span><br><span class="line">            connector.subscribe(<span class="string">&quot;gmall-2021.*&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4 获取数据</span></span><br><span class="line">            <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> connector.get(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//5 获取Entry集合</span></span><br><span class="line">            List&lt;CanalEntry.Entry&gt; entries = message.getEntries();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//6 判断是否有数据</span></span><br><span class="line">            <span class="keyword">if</span> (entries.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;没有数据&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//7 解析Entry</span></span><br><span class="line">                <span class="keyword">for</span> (CanalEntry.Entry entry : entries) &#123;</span><br><span class="line">                    <span class="comment">//7.1 获取表名</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">tableName</span> <span class="operator">=</span> entry.getHeader().getTableName();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//7.2 获取entry类型</span></span><br><span class="line"></span><br><span class="line">                    CanalEntry.<span class="type">EntryType</span> <span class="variable">entryType</span> <span class="operator">=</span> entry.getEntryType();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//7.3 获取序列化后数据</span></span><br><span class="line">                    <span class="type">ByteString</span> <span class="variable">storeValue</span> <span class="operator">=</span> entry.getStoreValue();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//7.4 判断当前entryType是否是ROWDATA</span></span><br><span class="line">                    <span class="keyword">if</span> (CanalEntry.EntryType.ROWDATA.equals(entryType)) &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//7.4.1 反序列化获取rowData</span></span><br><span class="line">                        CanalEntry.<span class="type">RowChange</span> <span class="variable">rowChange</span> <span class="operator">=</span> CanalEntry.RowChange.parseFrom(storeValue);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//7.4.2 获取事件的操作类型</span></span><br><span class="line">                        CanalEntry.<span class="type">EventType</span> <span class="variable">eventType</span> <span class="operator">=</span> rowChange.getEventType();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//7.4.3 获取数据集</span></span><br><span class="line">                        List&lt;CanalEntry.RowData&gt; rowDatas = rowChange.getRowDatasList();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//7.4.4 遍历数据集，打印数据</span></span><br><span class="line">                        <span class="keyword">for</span> (CanalEntry.RowData rowData : rowDatas) &#123;</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 更新前的数据</span></span><br><span class="line">                            <span class="type">JSONObject</span> <span class="variable">beforeData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">                            <span class="comment">//遍历更新前的数据</span></span><br><span class="line">                            rowData.getBeforeColumnsList().forEach(beforeColumn -&gt; &#123;</span><br><span class="line">                                beforeData.put(beforeColumn.getName(), beforeColumn.getValue());</span><br><span class="line">                            &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 更新后的数据</span></span><br><span class="line">                            <span class="type">JSONObject</span> <span class="variable">afterData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">                            <span class="comment">//遍历更新后的数据</span></span><br><span class="line">                            rowData.getAfterColumnsList().forEach(afterColumn -&gt; &#123;</span><br><span class="line">                                afterData.put(afterColumn.getName(), afterColumn.getValue());</span><br><span class="line">                            &#125;);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//打印数据</span></span><br><span class="line">                            System.out.println(<span class="string">&quot;tableName:&quot;</span> + tableName + <span class="string">&quot; eventType:&quot;</span> + eventType + <span class="string">&quot; beforeData:&quot;</span> + beforeData + <span class="string">&quot; afterData:&quot;</span> + afterData);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;当前entryType是&quot;</span> + entryType);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="Canal数据结构"><a href="#Canal数据结构" class="headerlink" title="Canal数据结构"></a>Canal数据结构</h4><p><img src="/../image/image-20220419182943835.png" alt="image-20220419182943835"></p><ul><li><p>启动canal</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">canal]$ bin/startup.sh</span><br></pre></td></tr></table></figure></li><li><p>运行代码</p></li><li><p>向数据库gmall-2021&#x2F;user_info做增删改操作</p></li><li><p>查看idea的控制台</p></li></ul><h2 id="Kafka-模式"><a href="#Kafka-模式" class="headerlink" title="Kafka 模式"></a>Kafka 模式</h2><ul><li><p>修改canal.properties        tcp，改为输出到 kafka</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#################################################</span></span><br><span class="line"><span class="comment">######### common argument ############# </span></span><br><span class="line"><span class="comment">#################################################</span></span><br><span class="line"><span class="attr">canal.id</span> = <span class="string">1</span></span><br><span class="line"><span class="attr">canal.ip</span> =<span class="string"></span></span><br><span class="line"><span class="attr">canal.port</span> = <span class="string">11111</span></span><br><span class="line"><span class="attr">canal.metrics.pull.port</span> = <span class="string">11112</span></span><br><span class="line"><span class="attr">canal.zkServers</span> =<span class="string"></span></span><br><span class="line"><span class="comment"># flush data to zk</span></span><br><span class="line"><span class="attr">canal.zookeeper.flush.period</span> = <span class="string">1000</span></span><br><span class="line"><span class="attr">canal.withoutNetty</span> = <span class="string">false</span></span><br><span class="line"><span class="comment"># tcp, kafka, RocketMQ</span></span><br><span class="line"><span class="attr">canal.serverMode</span> = <span class="string">kafka</span></span><br><span class="line"><span class="attr">👆</span></span><br><span class="line"><span class="comment"># flush meta cursor/parse position to file</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>修改 Kafka 集群的地址</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##################################################</span></span><br><span class="line"><span class="comment">######### MQ #############</span></span><br><span class="line"><span class="comment">##################################################</span></span><br><span class="line"><span class="attr">canal.mq.servers</span> = <span class="string">hadoop102:9092,hadoop103:9092,hadoop104:9092</span></span><br></pre></td></tr></table></figure></li><li><p>修改 instance.properties 输出到 Kafka 的主题以及分区数</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mq config</span></span><br><span class="line"><span class="attr">canal.mq.topic</span>=<span class="string">canal_test</span></span><br><span class="line"><span class="attr">canal.mq.partitionsNum</span>=<span class="string">1</span></span><br><span class="line"><span class="comment"># hash partition config</span></span><br><span class="line"><span class="comment">#canal.mq.partition=0</span></span><br><span class="line"><span class="comment">#canal.mq.partitionHash=mytest.person:id,mytest.role:id</span></span><br></pre></td></tr></table></figure></li></ul><!--注意：默认还是输出到指定 Kafka 主题的一个 kafka 分区，因为多个分区并行可能会打 乱 binlog 的顺序 ， 如 果 要 提 高 并 行 度 ， 首 先 设 置 kafka 的 分 区 数 >1, 然 后 设 置 canal.mq.partitionHash 属性--><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ul><li><p>启动canal</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">canal]$ bin/startup.sh</span><br></pre></td></tr></table></figure></li><li><p>启动 Kafka 消费客户端</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-consumer.sh --bootstrap-server hadoop102:9092 --topic canal_test</span><br></pre></td></tr></table></figure></li><li><p>向数据库gmall-2021&#x2F;user_info做增删改操作</p></li><li><p>查看kafka消费者的控制台</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown数学公式</title>
      <link href="/2023/01/18/Markdown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
      <url>/2023/01/18/Markdown%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="行内与独行"><a href="#行内与独行" class="headerlink" title="行内与独行"></a>行内与独行</h2><ol><li>行内公式：将公式插入到本行内，符号：<code>$公式内容$</code>，如：$xyz$</li><li>独行公式：将公式插入到新的一行内，并且居中，符号：<code>$$公式内容$$</code>，如：$$xyz$$</li></ol><h2 id="上标、下标与组合"><a href="#上标、下标与组合" class="headerlink" title="上标、下标与组合"></a>上标、下标与组合</h2><ol><li>上标符号，符号：<code>^</code>，如：$x^4$</li><li>下标符号，符号：<code>_</code>，如：$x_1$</li><li>组合符号，符号：<code>&#123;&#125;</code>，如：${16}<em>{8}O{2+}</em>{2}$</li></ol><h2 id="汉字、字体与格式"><a href="#汉字、字体与格式" class="headerlink" title="汉字、字体与格式"></a>汉字、字体与格式</h2><ol><li>汉字形式，符号：<code>\mbox&#123;&#125;</code>，如：$V_{\mbox{初始}}$</li><li>字体控制，符号：<code>\displaystyle</code>，如：$\displaystyle \frac{x+y}{y+z}$</li><li>下划线符号，符号：<code>\underline</code>，如：$\underline{x+y}$</li><li>标签，符号<code>\tag&#123;数字&#125;</code>，如：$\tag{11}$</li><li>上大括号，符号：<code>\overbrace&#123;算式&#125;</code>，如：$\overbrace{a+b+c+d}^{2.0}$</li><li>下大括号，符号：<code>\underbrace&#123;算式&#125;</code>，如：$a+\underbrace{b+c}_{1.0}+d$</li><li>上位符号，符号：<code>\stacrel&#123;上位符号&#125;&#123;基位符号&#125;</code>，如：$\vec{x}\stackrel{\mathrm{def}}{&#x3D;}{x_1,\dots,x_n}$</li></ol><h2 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h2><ol><li>两个                  quad          (四)                空格，符号：<code>\qquad</code>，如：$x \qquad y$</li><li>​                  quad          (四)                空格，符号：<code>\quad</code>，如：$x \                  quad          (四)                 y$</li><li>大空格，符号<code>\</code>，如：$x \  y$</li><li>中空格，符号<code>\:</code>，如：$x : y$</li><li>小空格，符号<code>\,</code>，如：$x , y$</li><li>没有空格，符号&#96;&#96;，如：$xy$</li><li>紧贴，符号<code>\!</code>，如：$x ! y$</li></ol><h2 id="定界符与组合"><a href="#定界符与组合" class="headerlink" title="定界符与组合"></a>定界符与组合</h2><ol><li>括号，符号：<code>（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)</code>，如：$（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)$</li><li>中括号，符号：<code>[]</code>，如：$[x+y]$</li><li>大括号，符号：<code>\&#123; \&#125;</code>，如：${x+y}$</li><li>自适应括号，符号：<code>\left \right</code>，如：$\left(x\right)$，$\left(x{yz}\right)$</li><li>组合公式，符号：<code>&#123;上位公式 \choose 下位公式&#125;</code>，如：${n+1 \choose k}&#x3D;{n \choose k}+{n \choose k-1}$</li><li>组合公式，符号：<code>&#123;上位公式 \atop 下位公式&#125;</code>，如：$\sum_{k_0,k_1,\ldots&gt;0 \atop k_0+k_1+\cdots&#x3D;n}A_{k_0}A_{k_1}\cdots$</li></ol><h2 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h2><ol><li>加法运算，符号：<code>+</code>，如：$x+y&#x3D;z$</li><li>减法运算，符号：<code>-</code>，如：$x-y&#x3D;z$</li><li>加减运算，符号：<code>\pm</code>，如：$x \pm y&#x3D;z$</li><li>减甲运算，符号：<code>\mp</code>，如：$x \mp y&#x3D;z$</li><li>乘法运算，符号：<code>\times</code>，如：$x \times y&#x3D;z$</li><li>点乘运算，符号：<code>\cdot</code>，如：$x \cdot y&#x3D;z$</li><li>星乘运算，符号：<code>\ast</code>，如：$x \ast y&#x3D;z$</li><li>除法运算，符号：<code>\div</code>，如：$x \div y&#x3D;z$</li><li>斜法运算，符号：<code>/</code>，如：$x&#x2F;y&#x3D;z$</li><li>分式表示，符号：<code>\frac&#123;分子&#125;&#123;分母&#125;</code>，如：$\frac{x+y}{y+z}$</li><li>分式表示，符号：<code>&#123;分子&#125; \voer &#123;分母&#125;</code>，如：${x+y} \over {y+z}$</li><li>绝对值表示，符号：<code>||</code>，如：$|x+y|$</li></ol><h2 id="高级运算"><a href="#高级运算" class="headerlink" title="高级运算"></a>高级运算</h2><ol><li>平均数运算，符号：<code>\overline&#123;算式&#125;</code>，如：$\overline{xyz}$</li><li>开二次方运算，符号：<code>\sqrt</code>，如：$\sqrt x$</li><li>开方运算，符号：<code>\sqrt[开方数]&#123;被开方数&#125;</code>，如：$\sqrt[3]{x+y}$</li><li>对数运算，符号：<code>\log</code>，如：$\log(x)$</li><li>极限运算，符号：<code>\lim</code>，如：$\lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li><li>极限运算，符号：<code>\displaystyle \lim</code>，如：$\displaystyle \lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li><li>求和运算，符号：<code>\sum</code>，如：$\sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li><li>求和运算，符号：<code>\displaystyle \sum</code>，如：$\displaystyle \sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$</li><li>积分运算，符号：<code>\int</code>，如：$\int^{\infty}_{0}{xdx}$</li><li>积分运算，符号：<code>\displaystyle \int</code>，如：$\displaystyle \int^{\infty}_{0}{xdx}$</li><li>微分运算，符号：<code>\partial</code>，如：$\frac{\partial x}{\partial y}$</li><li>矩阵表示，符号：<code>\begin&#123;matrix&#125; \end&#123;matrix&#125;</code>，如：$\left[ \begin{matrix} 1 &amp;2 &amp;\cdots &amp;4\5 &amp;6 &amp;\cdots &amp;8\vdots &amp;\vdots &amp;\ddots &amp;\vdots\13 &amp;14 &amp;\cdots &amp;16\end{matrix} \right]$</li></ol><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><ol><li>等于运算，符号：<code>=</code>，如：$x+y&#x3D;z$</li><li>大于运算，符号：<code>&gt;</code>，如：$x+y&gt;z$</li><li>小于运算，符号：<code>&lt;</code>，如：$x+y&lt;z$</li><li>大于等于运算，符号：<code>\geq</code>，如：$x+y \geq z$</li><li>小于等于运算，符号：<code>\leq</code>，如：$x+y \leq z$</li><li>不等于运算，符号：<code>\neq</code>，如：$x+y \neq z$</li><li>不大于等于运算，符号：<code>\ngeq</code>，如：$x+y \ngeq z$</li><li>不大于等于运算，符号：<code>\not\geq</code>，如：$x+y \not\geq z$</li><li>不小于等于运算，符号：<code>\nleq</code>，如：$x+y \nleq z$</li><li>不小于等于运算，符号：<code>\not\leq</code>，如：$x+y \not\leq z$</li><li>约等于运算，符号：<code>\approx</code>，如：$x+y \approx z$</li><li>恒定等于运算，符号：<code>\equiv</code>，如：$x+y \equiv z$</li></ol><h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><ol><li>属于运算，符号：<code>\in</code>，如：$x \in y$</li><li>不属于运算，符号：<code>\notin</code>，如：$x \notin y$</li><li>不属于运算，符号：<code>\not\in</code>，如：$x \not\in y$</li><li>子集运算，符号：<code>\subset</code>，如：$x \                  subset          (子集)                 y$</li><li>子集运算，符号：<code>\supset</code>，如：$x \supset y$</li><li>真子集运算，符号：<code>\subseteq</code>，如：$x \subseteq y$</li><li>非真子集运算，符号：<code>\subsetneq</code>，如：$x \subsetneq y$</li><li>真子集运算，符号：<code>\supseteq</code>，如：$x \supseteq y$</li><li>非真子集运算，符号：<code>\supsetneq</code>，如：$x \supsetneq y$</li><li>非子集运算，符号：<code>\not\subset</code>，如：$x \not\subset y$</li><li>非子集运算，符号：<code>\not\supset</code>，如：$x \not\supset y$</li><li>并集运算，符号：<code>\cup</code>，如：$x \cup y$</li><li>交集运算，符号：<code>\cap</code>，如：$x \cap y$</li><li>差集运算，符号：<code>\setminus</code>，如：$x \setminus y$</li><li>同或运算，符号：<code>\bigodot</code>，如：$x \bigodot y$</li><li>同与运算，符号：<code>\bigotimes</code>，如：$x \bigotimes y$</li><li>实数集合，符号：<code>\mathbb&#123;R&#125;</code>，如：<code>\mathbb&#123;R&#125;</code></li><li>自然数集合，符号：<code>\mathbb&#123;Z&#125;</code>，如：<code>\mathbb&#123;Z&#125;</code></li><li>空集，符号：<code>\emptyset</code>，如：$\emptyset$</li></ol><h2 id="数学符号"><a href="#数学符号" class="headerlink" title="数学符号"></a>数学符号</h2><ol><li>无穷，符号：<code>\infty</code>，如：$\infty$</li><li>虚数，符号：<code>\imath</code>，如：$\imath$</li><li>虚数，符号：<code>\jmath</code>，如：$\jmath$</li><li>数学符号，符号<code>\hat&#123;a&#125;</code>，如：$\hat{a}$</li><li>数学符号，符号<code>\check&#123;a&#125;</code>，如：$\check{a}$</li><li>数学符号，符号<code>\breve&#123;a&#125;</code>，如：$\breve{a}$</li><li>数学符号，符号<code>\tilde&#123;a&#125;</code>，如：$\tilde{a}$</li><li>数学符号，符号<code>\bar&#123;a&#125;</code>，如：$\bar{a}$</li><li>矢量符号，符号<code>\vec&#123;a&#125;</code>，如：$\vec{a}$</li><li>数学符号，符号<code>\acute&#123;a&#125;</code>，如：$\acute{a}$</li><li>数学符号，符号<code>\grave&#123;a&#125;</code>，如：$\grave{a}$</li><li>数学符号，符号<code>\mathring&#123;a&#125;</code>，如：$\mathring{a}$</li><li>一阶导数符号，符号<code>\dot&#123;a&#125;</code>，如：$\dot{a}$</li><li>二阶导数符号，符号<code>\ddot&#123;a&#125;</code>，如：$\ddot{a}$</li><li>上箭头，符号：<code>\uparrow</code>，如：$\uparrow$</li><li>上箭头，符号：<code>\Uparrow</code>，如：$\Uparrow$</li><li>下箭头，符号：<code>\downarrow</code>，如：$\downarrow$</li><li>下箭头，符号：<code>\Downarrow</code>，如：$\Downarrow$</li><li>左箭头，符号：<code>\leftarrow</code>，如：$\leftarrow$</li><li>左箭头，符号：<code>\Leftarrow</code>，如：$\Leftarrow$</li><li>右箭头，符号：<code>\rightarrow</code>，如：$\rightarrow$</li><li>右箭头，符号：<code>\Rightarrow</code>，如：$\Rightarrow$</li><li>底端对齐的省略号，符号：<code>\ldots</code>，如：$1,2,\ldots,n$</li><li>中线对齐的省略号，符号：<code>\cdots</code>，如：$x_1^2 + x_2^2 + \cdots + x_n^2$</li><li>竖直对齐的省略号，符号：<code>\vdots</code>，如：$\vdots$</li><li>斜对齐的省略号，符号：<code>\ddots</code>，如：$\ddots$</li></ol><h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><table><thead><tr><th>字母</th><th>实现</th><th>字母</th><th>实现</th></tr></thead><tbody><tr><td>A</td><td><code>A</code></td><td>α</td><td><code>\alhpa</code></td></tr><tr><td>B</td><td><code>B</code></td><td>β</td><td><code>\beta</code></td></tr><tr><td>Γ</td><td><code>\Gamma</code></td><td>γ</td><td><code>\gamma</code></td></tr><tr><td>Δ</td><td><code>\Delta</code></td><td>δ</td><td><code>\delta</code></td></tr><tr><td>E</td><td><code>E</code></td><td>ϵ</td><td><code>\epsilon</code></td></tr><tr><td>Z</td><td><code>Z</code></td><td>ζ</td><td><code>\zeta</code></td></tr><tr><td>H</td><td><code>H</code></td><td>η</td><td><code>\eta</code></td></tr><tr><td>Θ</td><td><code>\Theta</code></td><td>θ</td><td><code>\theta</code></td></tr><tr><td>I</td><td><code>I</code></td><td>ι</td><td><code>\iota</code></td></tr><tr><td>K</td><td><code>K</code></td><td>κ</td><td><code>\kappa</code></td></tr><tr><td>Λ</td><td><code>\Lambda</code></td><td>λ</td><td><code>\lambda</code></td></tr><tr><td>M</td><td><code>M</code></td><td>μ</td><td><code>\mu</code></td></tr><tr><td>N</td><td><code>N</code></td><td>ν</td><td><code>\nu</code></td></tr><tr><td>Ξ</td><td><code>\Xi</code></td><td>ξ</td><td><code>\xi</code></td></tr><tr><td>O</td><td><code>O</code></td><td>ο</td><td><code>\omicron</code></td></tr><tr><td>Π</td><td><code>\Pi</code></td><td>π</td><td><code>\pi</code></td></tr><tr><td>P</td><td><code>P</code></td><td>ρ</td><td><code>\rho</code></td></tr><tr><td>Σ</td><td><code>\Sigma</code></td><td>σ</td><td><code>\sigma</code></td></tr><tr><td>T</td><td><code>T</code></td><td>τ</td><td><code>\tau</code></td></tr><tr><td>Υ</td><td><code>\Upsilon</code></td><td>υ</td><td><code>\upsilon</code></td></tr><tr><td>Φ</td><td><code>\Phi</code></td><td>ϕ</td><td><code>\phi</code></td></tr><tr><td>X</td><td><code>X</code></td><td>χ</td><td><code>\chi</code></td></tr><tr><td>Ψ</td><td><code>\Psi</code></td><td>ψ</td><td><code>\psi</code></td></tr><tr><td>Ω</td><td><code>\v</code></td><td>ω</td><td><code>\omega</code></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式</title>
      <link href="/2023/01/17/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/01/17/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>设计模式（Design pattern）代表了最佳的实践通常被有经验的面向对象的软件开发人员所采用。</p></blockquote><p>&#x3D;&#x3D;设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。&#x3D;&#x3D;</p><p>设计模式是一套被</p><ul><li>反复使用的、</li><li>多数人知晓的、</li><li>经过分类编目的、</li><li>代码设计经验的总结。</li></ul><blockquote><p>👴什么是 GOF（四人帮，全拼 Gang of Four）？</p></blockquote><p>在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为</p><p> Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素） ，</p><p>该书首次提到了软件开发中设计模式的概念。<br>四位作者合称 GOF（四人帮，全拼 <code>Gang of Four</code>）。</p><p>他们所提出的设计模式主要是基于以下的面向对象设计原则。</p><ul><li>对接口编程而不是对实现编程。</li><li>优先使用对象组合而不是继承。</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><blockquote><p>设计模式在软件开发中的两个主要用途。</p></blockquote><h4 id="开发人员的共同平台"><a href="#开发人员的共同平台" class="headerlink" title="开发人员的共同平台"></a>开发人员的共同平台</h4><p>设计模式提供了一个标准的术语系统，且具体到特定的情景。例如，单例设计模式意味着使用单个对象，这样所有熟悉单例设计模式的开发人员都能使用单个对象，并且可以通过这种方式告诉对方，程序使用的是单例模式。</p><h4 id="最佳的实践"><a href="#最佳的实践" class="headerlink" title="最佳的实践"></a>最佳的实践</h4><p>设计模式已经经历了很长一段时间的发展，它们提供了软件开发过程中面临的一般问题的最佳解决方案。学习这些模式有助于经验不足的开发人员通过一种简单快捷的方式来学习软件设计。</p><h2 id="六大原则"><a href="#六大原则" class="headerlink" title="六大原则"></a>六大原则</h2><p><strong>1、开闭原则（Open Close Principle）</strong><br>        开闭原则的意思是：对扩展开放，对修改关闭。</p><pre><code>    在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</code></pre><p><strong>2、里氏代换原则（Liskov Substitution Principle）</strong><br>        里氏代换原则是面向对象设计的基本原则之一。</p><ul><li>里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。</li><li>LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。</li><li>里氏代换原则是对开闭原则的补充。</li><li>实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</li></ul><p><strong>3、依赖倒转原则（Dependence Inversion Principle）</strong><br>        这个原则是开闭原则的基础</p><pre><code>    具体内容：针对接口编程，依赖于抽象而不依赖于具体。</code></pre><p><strong>4、接口隔离原则（Interface Segregation Principle）</strong><br>        这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。</p><pre><code>    它还有另外一个意思是：降低类之间的耦合度。    由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</code></pre><p><strong>5、迪米特法则，又称最少知道原则（Demeter Principle）</strong><br>        最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p><p><strong>6、合成复用原则（Composite Reuse Principle）</strong><br>        合成复用原则是指：尽量使用合成&#x2F;聚合的方式，而不是使用继承。</p><h2 id="23种设计模式"><a href="#23种设计模式" class="headerlink" title="23种设计模式"></a>23种设计模式</h2><p>&#x3D;&#x3D;根据模式是用来完成什么工作来划分&#x3D;&#x3D;</p><p>分为</p><ul><li>创建型模式</li><li>结构型模式</li><li>行为型模式</li></ul><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><blockquote><p>用于描述“怎样创建对象，它的主要特点是<strong>将对象的创建与使用分离</strong>。</p></blockquote><ol><li>单例（ Singleton ）模式：<ul><li>某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。</li></ul></li><li>原型（Prototype）模式：<ul><li>将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。</li></ul></li><li>工厂方法（Factory Method）模式：<ul><li>定义一个用于创建产品的接口，由子类决定生产什么产品。</li></ul></li><li>抽象工厂（AbstractFactory）模式：<ul><li>提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。</li></ul></li><li>建造者（Builder）模式：<ul><li>将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。</li></ul></li></ol><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><blockquote><p>用于描述如何将类或对象按某种布局组成更大的结构</p></blockquote><ol><li>代理（ Proxy ）模式：<ul><li>为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。</li></ul></li><li>适配器（ Adapter ）模式：<ul><li>将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</li></ul></li><li>桥接（Bridge）模式：<ul><li>将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</li></ul></li><li>装饰（ Decorator ）模式：<ul><li>动态的给对象增加一些职责，即增加其额外的功能。</li></ul></li><li>外观（Facade）模式：<ul><li>为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。</li></ul></li><li>享元（Flyweight）模式：<ul><li>运用共享技术来有效地支持大量细粒度对象的复用。</li></ul></li><li>组合（Composite）模式：<ul><li>将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。</li></ul></li></ol><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><blockquote><p>用于描述类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责。</p></blockquote><ol><li><p>模板方法（TemplateMethod）模式：</p><ul><li>定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</li></ul></li><li><p>策略（Strategy）模式：</p><ul><li>定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。</li></ul></li><li><p>命令（Command）模式：</p><ul><li>将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。</li></ul></li><li><p>职责链（Chain of Responsibility）模式：</p><ul><li>把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。</li></ul></li><li><p>状态（State）模式：</p><ul><li>允许一个对象在其内部状态发生改变时改变其行为能力。</li></ul></li><li><p>观察者（Observer）模式：</p><ul><li>多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。</li></ul></li><li><p>中介者（ Mediator ）模式：</p><ul><li>定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。</li></ul></li><li><p>迭代器（Iterator）模式：</p><ul><li>提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</li></ul></li><li><p>访问者（Visitor）模式：</p><ul><li>在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。</li></ul></li><li><p>备忘录（ Memento ）模式：</p><ul><li>在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。</li></ul></li><li><p>解释器（Interpreter）模式：</p><ul><li>提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
